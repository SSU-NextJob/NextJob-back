<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nextjob.back.user.service.UserMapper">

    <select id="findUserDetail" resultType="CamelCaseMap">
        /* UserMapper.findUserDetail */
        SELECT user_id          /* 사용자ID */
             , name             /* 사용자명 */
             , email            /* 이메일 */
             , description      /* 섦명 */
             , tech_stack       /* 기술스택 */
             , profile_image    /* 프로필이미지 */
             , is_visible       /* 노출여부 */
             , GetDetailCodeName('USER_TYPE', user_type) AS user_type      /* 개발분야 */
             , access_token     /* 액세스 토큰 */
        FROM users
       WHERE 1=1
         AND user_id = #{userId}
    </select>

    <select id="findUserDetailByEmail" resultType="CamelCaseMap">
        SELECT user_id          /* 사용자ID */
             , name             /* 사용자명 */
             , email            /* 이메일 */
             , description      /* 섦명 */
             , tech_stack       /* 기술스택 */
             , profile_image    /* 프로필이미지 */
             , is_visible       /* 노출여부 */
             , GetDetailCodeName('USER_TYPE', user_type) AS user_type      /* 개발분야 */
        FROM users
        WHERE email = #{email}
    </select>

    <select id="findUserDetailByUserId" resultType="CamelCaseMap">
        SELECT * FROM users
        WHERE user_id = #{userID}
    </select>

    <select id="findUserList" resultType="CamelCaseMap">
        /* UserMapper.findUserList */
        SELECT user_id          /* 사용자ID */
             , name             /* 사용자명 */
             , email            /* 이메일 */
             , description      /* 섦명 */
             , tech_stack       /* 기술스택 */
             , profile_image    /* 프로필이미지 */
             , is_visible       /* 노출여부 */
             , GetDetailCodeName('USER_TYPE', user_type) AS user_type      /* 개발분야 */
          FROM users
         WHERE 1=1
           AND is_visible = 1
        <if test="userType != null and userType != ''" >
           AND user_type = #{userType}
        </if>
        <if test="search != null and search != ''">
           AND name LIKE CONCAT('%', #{search}, '%')
        </if>
        ORDER BY user_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <insert id="insertSuggestRequest">
        /* UserMapper.insertSuggestRequest */
        <selectKey keyProperty="requestId" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO requests (
                    project_id      /* 제안 할 프로젝트ID */
                  , user_id         /* 제안 받을 userId */
                  , request_status  /* 요청상태 */
                  , request_type    /* 요청종류 */
                  , request_date    /* 요청일자 */
        ) VALUES (
                    #{projectId}
                  , #{userId}
                  , #{requestStatus}
                  , #{requestType}
                  , NOW()
                 )
    </insert>

    <insert id="insertNotification">
        /* UserMapper.insertNotification */
        INSERT INTO notifications (
                    title               /* 알림제목 */
                  , content             /* 알림내용 */
                  , notification_type   /* 알림종류 */
                  , user_id             /* 알림받을 userId */
                  , create_date         /* 생성일자 */
        ) VALUES (
                   #{title}
                 , #{content}
                 , #{notificationType}
                 , #{userId}
                 , NOW()
               )
    </insert>

    <update id="updateUser">
        UPDATE users
        SET name = #{name}, tech_stack = #{techStack}, description = #{description}, user_type = #{userType}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserVisibility">
        UPDATE users
        SET is_visible = #{isVisible}
        WHERE user_id = #{userId}
    </update>

    <insert id="createUser">
        <selectKey keyProperty="userId" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO users (
           name, email, is_visible, create_date
        ) VALUES (
           #{name}, #{email}, FALSE, NOW()
        )
    </insert>

    <update id="updateUserAccessToken">
        UPDATE users
        SET access_token = #{accessToken}
        WHERE user_id = #{userId}
    </update>
</mapper>
